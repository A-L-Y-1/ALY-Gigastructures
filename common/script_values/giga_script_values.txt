giga_empire_size_mult = {
	base = 0

	weight = trigger:empire_sprawl_over_cap

	multiply = value:giga_empire_size_mult_scaling

	min = 0
}
giga_empire_size_mult_scaling = {
	base = 1

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = empire_size_penalty_mult
		}
		mode = add
	}
}

# build speed reduction for the rogue AI PCC
giga_rogue_ai_computer_build_speed_mult = {
	base = 0.25

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_giga_rogue_ai_relay_servers
			}
		}
		mode = multiply
	}

	max = 0.9
}

giga_count_resource = {
	# complex_trigger_modifier = {
	# 	trigger = has_resource
	# 	parameters = {
	# 		type = $resource$
	# 	}
	# 	mode = weight
	# }

	# since the above doesn't work (yet)... lol
	base = 0

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 0
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 1
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 2
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 3
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 4
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 5
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 6
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 7
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 8
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 9
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 10
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 11
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 12
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 13
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 14
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 15
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 16
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 17
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 18
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 19
		}
	}
}

giga_get_opinion_from_jobs = {
	base = 0

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = giga_tooltips_influence_produces_add
		}
		mode = weight
	}
}

giga_bonus_desired_constructors_min = {
	base = 0

	# give some more early constructors to the frame for outposts and asteroids
	modifier = {
		has_origin = origin_frameworld
		add = 2
	}

	# more availability
	modifier = {
		has_technology = tech_mega_engineering
		add = value:giga_bonus_desired_constructors_min_mega_engineering
	}
}

giga_bonus_desired_constructors_min_mega_engineering = {
	base = 0

	# an additional 1 for every 4 systems
	add = trigger:controlled_systems
	mult = 0.25

	# limited to bonus build cap + 5 or 10, whichever is less
	max = value:giga_bonus_min_constructors_calc
	max = 10
}

giga_bonus_min_constructors_calc = {
	weight = modifier:country_megastructure_build_cap_add
	add = 5
}

# this is added to the vanilla max
giga_bonus_desired_constructors_max = {
	# give extra max to normal and awakened empires
	modifier = {
		or = {
			is_country_type = default
			is_country_type = awakened_fallen_empire
		}
		add = value:giga_bonus_desired_constructors_max_normal
	}
}

giga_bonus_desired_constructors_max_normal = {
	base = 0

	# an additional 1 for every 20 systems
	add = trigger:controlled_systems
	mult = 0.05

	# half that for awakened empires
	modifier = {
		is_country_type = awakened_fallen_empire
		mult = 0.5
	}

	# give at least bonus buildcap
	# this will scale with production for supertensiles automatically via the AI cap modifier
	modifier = {
		not = { has_global_flag = giga_buildcap_u }

		min = modifier:country_megastructure_build_cap_add
	}
	# or a lump sum if unlimited
	modifier = {
		has_global_flag = giga_buildcap_u

		min = 10
	}
}